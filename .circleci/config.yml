version: 2
jobs:
  build:
    branches:
      only:
        - master
        - integration
    docker:
       - image: circleci/ruby:2.4.4-node-browsers

    environment:
      YOUSOUND_IMAGE: "yousound-api"
      AWSREGION: "us-east-1"
      AWSACCOUNTID: "731521589805"
      APP: "YS-API"

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: "PREPARE ENVIRONMENT VARIABLES"
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "export ENVIRONMENT=production" >> $BASH_ENV
              echo "export EBENVIRONMENT=prod" >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "integration" ]; then
              echo "export ENVIRONMENT=integration" >> $BASH_ENV
              echo "export EBENVIRONMENT=int" >> $BASH_ENV
            # USE THIS TO DEPLOY FROM OTHER FEATURE BRANCHES
            elif [ "${CIRCLE_BRANCH}" == "feature-branch" ]; then
              echo "export ENVIRONMENT=integration" >> $BASH_ENV
              echo "export EBENVIRONMENT=int" >> $BASH_ENV
            fi

      - run:
          name: "INSTALL DEPLOYMENT DEPENDENCIES"
          command: |
            sudo apt-get update && sudo apt-get install python-pip -y
            ## INSTALL AWS CLI
            sudo pip install awscli --upgrade
            # INSTALL AWS EB CLI
            sudo pip install awsebcli --upgrade

      - restore_cache:
          keys:
          - v1-deps-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --path vendor/bundle
            #bundle install --jobs=4 --retry=3 --path vendor/bundle --deployment

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-deps-{{ checksum "Gemfile.lock" }}

      - run:
          name: "PREPARE FILES FOR DEPLOYMENT"
          command: |
            # GET THE COMMIT ID TO SET AS PART OF THE INSTANCE NAME FOR PAPERTRAIL
            COMMITID=$(git rev-parse --short HEAD)

            # COPY ENVIRONMENT VARIABLE FROM S3 env.sh
            aws s3 cp s3://ys-circleci/api/env.sh.$ENVIRONMENT ./env.sh
            chmod +x ./env.sh
            . ./env.sh

            # MOVE Dockerrun.aws.json TO ROOT SO BEANSTALK CAN READ IT
            cp .circleci/Dockerrun.aws.json Dockerrun.aws.json

            # UPDATE Dockerrun.aws.json BASED ON ENVIRONMENT
            sed -i "s/<ENVIRONMENT>/$ENVIRONMENT/g" Dockerrun.aws.json
            sed -i "s/<RAILS_ENV>/$RAILS_ENV/g" Dockerrun.aws.json
            sed -i "s/<REDIS_URL>/$REDIS_URL/g" Dockerrun.aws.json
            sed -i "s/<HOST>/$HOST/g" Dockerrun.aws.json
            sed -i "s/<API_BASE_URL>/$API_BASE_URL/g" Dockerrun.aws.json
            sed -i "s/<SOCKET_BASE_URL>/$SOCKET_BASE_URL/g" Dockerrun.aws.json
            sed -i "s/<WEB_BASE_URL>/$WEB_BASE_URL/g" Dockerrun.aws.json
            sed -i "s/<DATABASE_HOST>/$DATABASE_HOST/g" Dockerrun.aws.json
            sed -i "s/<DATABASE_USERNAME>/$DATABASE_USERNAME/g" Dockerrun.aws.json
            sed -i "s/<DATABASE_PASSWORD>/$DATABASE_PASSWORD/g" Dockerrun.aws.json
            sed -i "s/<DATABASE_NAME>/$DATABASE_NAME/g" Dockerrun.aws.json
            sed -i "s/<SECRET_KEY_BASE>/$SECRET_KEY_BASE/g" Dockerrun.aws.json
            sed -i "s/<ELASTICSEARCH_URL>/$ELASTICSEARCH_URL/g" Dockerrun.aws.json
            sed -i "s/<AWS_CLOUDFRONT_KEY_PAIR_ID>/$AWS_CLOUDFRONT_KEY_PAIR_ID/g" Dockerrun.aws.json
            sed -i "s/<AWS_CLOUDFRONT_PRIVATE_KEY>/$AWS_CLOUDFRONT_PRIVATE_KEY/g" Dockerrun.aws.json
            sed -i "s/<AWS_CDN_HOST>/$AWS_CDN_HOST/g" Dockerrun.aws.json
            sed -i "s/<AWS_S3_REGION>/$AWS_S3_REGION/g" Dockerrun.aws.json
            sed -i "s/<AWS_S3_BUCKET>/$AWS_S3_BUCKET/g" Dockerrun.aws.json
            sed -i "s/<AWS_S3_ENDPOINT>/$AWS_S3_ENDPOINT/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_IAM_USERNAME>/$AWS_SES_IAM_USERNAME/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_SMTP_SERVER>/$AWS_SES_SMTP_SERVER/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_SMTP_USERNAME>/$AWS_SES_SMTP_USERNAME/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_SMTP_PASSWORD>/$AWS_SES_SMTP_PASSWORD/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_SMTP_PORT>/$AWS_SES_SMTP_PORT/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_SMTP_USE_TLS>/$AWS_SES_SMTP_USE_TLS/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_SMTP_DOMAIN>/$AWS_SES_SMTP_DOMAIN/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_SMTP_AUTH>/$AWS_SES_SMTP_AUTH/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_SUPPORT_EMAIL>/$AWS_SES_SUPPORT_EMAIL/g" Dockerrun.aws.json
            sed -i "s/<AWS_SES_VIOLATION_EMAIL>/$AWS_SES_VIOLATION_EMAIL/g" Dockerrun.aws.json
            sed -i "s/<AWS_MEDIALIVE_INPUT_SECURITY_GROUP_ID>/$AWS_MEDIALIVE_INPUT_SECURITY_GROUP_ID/g" Dockerrun.aws.json
            sed -i "s/<STRIPE_PUBLISHABLE_KEY>/$STRIPE_PUBLISHABLE_KEY/g" Dockerrun.aws.json
            sed -i "s/<STRIPE_SECRET_KEY>/$STRIPE_SECRET_KEY/g" Dockerrun.aws.json
            sed -i "s/<STRIPE_CONNECT_CLIENT_ID>/$STRIPE_CONNECT_CLIENT_ID/g" Dockerrun.aws.json
            sed -i "s/<TWITTER_API_KEY>/$TWITTER_API_KEY/g" Dockerrun.aws.json
            sed -i "s/<TWITTER_API_SECRET>/$TWITTER_API_SECRET/g" Dockerrun.aws.json
            sed -i "s/<AWS_ACCESS_KEY_ID>/$AWS_ACCESS_KEY_ID_APP/g" Dockerrun.aws.json
            sed -i "s/<AWS_SECRET_ACCESS_KEY>/$AWS_SECRET_ACCESS_KEY_APP/g" Dockerrun.aws.json
            sed -i "s/<AWS_REGION>/$AWS_REGION/g" Dockerrun.aws.json
            sed -i "s/<SIDEKIQ_USERNAME>/$SIDEKIQ_USERNAME/g" Dockerrun.aws.json
            sed -i "s/<SIDEKIQ_PASSWORD>/$SIDEKIQ_PASSWORD/g" Dockerrun.aws.json
            sed -i "s/<NEWRELIC_KEY>/$NEWRELIC_KEY/g" Dockerrun.aws.json
            sed -i "s/<SUPERADMIN_EMAIL>/$SUPERADMIN_EMAIL/g" Dockerrun.aws.json
            sed -i "s/<ADMIN_EMAIL>/$ADMIN_EMAIL/g" Dockerrun.aws.json
            sed -i "s/<ACRCLOUD_ACCESS_KEY>/$ACRCLOUD_ACCESS_KEY/g" Dockerrun.aws.json
            sed -i "s/<ACRCLOUD_ACCESS_SECRET>/$ACRCLOUD_ACCESS_SECRET/g" Dockerrun.aws.json
            sed -i "s/<ACRCLOUD_1_HOST>/$ACRCLOUD_1_HOST/g" Dockerrun.aws.json
            sed -i "s/<ACRCLOUD_1_ACCESS_KEY>/$ACRCLOUD_1_ACCESS_KEY/g" Dockerrun.aws.json
            sed -i "s/<ACRCLOUD_1_ACCESS_SECRET>/$ACRCLOUD_1_ACCESS_SECRET/g" Dockerrun.aws.json
            sed -i "s/<ACRCLOUD_2_HOST>/$ACRCLOUD_2_HOST/g" Dockerrun.aws.json
            sed -i "s/<ACRCLOUD_2_ACCESS_KEY>/$ACRCLOUD_2_ACCESS_KEY/g" Dockerrun.aws.json
            sed -i "s/<ACRCLOUD_2_ACCESS_SECRET>/$ACRCLOUD_2_ACCESS_SECRET/g" Dockerrun.aws.json
            sed -i "s/<ACRCLOUD_2_BUCKET>/$ACRCLOUD_2_BUCKET/g" Dockerrun.aws.json
            sed -i "s/<APP_NAME>/ys-api-$EBENVIRONMENT/g" ./config/newrelic.yml

      - deploy:
         name: "DEPLOY TO EB"
         command: |
           # DEPLOY TO EB
           eb use ys-api-$EBENVIRONMENT
           eb deploy ys-api-$EBENVIRONMENT
